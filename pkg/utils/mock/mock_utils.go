// Code generated by MockGen. DO NOT EDIT.
// Source: utils.go

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/api/config/v1"
	v10 "k8s.io/api/core/v1"
)

// MockUtilsInterface is a mock of UtilsInterface interface.
type MockUtilsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUtilsInterfaceMockRecorder
}

// MockUtilsInterfaceMockRecorder is the mock recorder for MockUtilsInterface.
type MockUtilsInterfaceMockRecorder struct {
	mock *MockUtilsInterface
}

// NewMockUtilsInterface creates a new mock instance.
func NewMockUtilsInterface(ctrl *gomock.Controller) *MockUtilsInterface {
	mock := &MockUtilsInterface{ctrl: ctrl}
	mock.recorder = &MockUtilsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilsInterface) EXPECT() *MockUtilsInterfaceMockRecorder {
	return m.recorder
}

// CreateNamespace mocks base method.
func (m *MockUtilsInterface) CreateNamespace(namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockUtilsInterfaceMockRecorder) CreateNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockUtilsInterface)(nil).CreateNamespace), namespace)
}

// CreatePodOnNode mocks base method.
func (m *MockUtilsInterface) CreatePodOnNode(nodeName, namespace, image string, command []string) (*v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePodOnNode", nodeName, namespace, image, command)
	ret0, _ := ret[0].(*v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePodOnNode indicates an expected call of CreatePodOnNode.
func (mr *MockUtilsInterfaceMockRecorder) CreatePodOnNode(nodeName, namespace, image, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePodOnNode", reflect.TypeOf((*MockUtilsInterface)(nil).CreatePodOnNode), nodeName, namespace, image, command)
}

// DeleteNamespace mocks base method.
func (m *MockUtilsInterface) DeleteNamespace(namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockUtilsInterfaceMockRecorder) DeleteNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockUtilsInterface)(nil).DeleteNamespace), namespace)
}

// DeletePod mocks base method.
func (m *MockUtilsInterface) DeletePod(pod *v10.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePod", pod)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePod indicates an expected call of DeletePod.
func (mr *MockUtilsInterfaceMockRecorder) DeletePod(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockUtilsInterface)(nil).DeletePod), pod)
}

// GetPlatformType mocks base method.
func (m *MockUtilsInterface) GetPlatformType() (v1.PlatformType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformType")
	ret0, _ := ret[0].(v1.PlatformType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformType indicates an expected call of GetPlatformType.
func (mr *MockUtilsInterfaceMockRecorder) GetPlatformType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformType", reflect.TypeOf((*MockUtilsInterface)(nil).GetPlatformType))
}

// GetPodLogs mocks base method.
func (m *MockUtilsInterface) GetPodLogs(namespace string, pod *v10.Pod) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodLogs", namespace, pod)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodLogs indicates an expected call of GetPodLogs.
func (mr *MockUtilsInterfaceMockRecorder) GetPodLogs(namespace, pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodLogs", reflect.TypeOf((*MockUtilsInterface)(nil).GetPodLogs), namespace, pod)
}

// IsSNOCluster mocks base method.
func (m *MockUtilsInterface) IsSNOCluster() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSNOCluster")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSNOCluster indicates an expected call of IsSNOCluster.
func (mr *MockUtilsInterfaceMockRecorder) IsSNOCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSNOCluster", reflect.TypeOf((*MockUtilsInterface)(nil).IsSNOCluster))
}

// RunCommandOnPod mocks base method.
func (m *MockUtilsInterface) RunCommandOnPod(pod *v10.Pod, command []string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommandOnPod", pod, command)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommandOnPod indicates an expected call of RunCommandOnPod.
func (mr *MockUtilsInterfaceMockRecorder) RunCommandOnPod(pod, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommandOnPod", reflect.TypeOf((*MockUtilsInterface)(nil).RunCommandOnPod), pod, command)
}

// WaitForPodStatus mocks base method.
func (m *MockUtilsInterface) WaitForPodStatus(namespace string, pod *v10.Pod, PodPhase v10.PodPhase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForPodStatus", namespace, pod, PodPhase)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForPodStatus indicates an expected call of WaitForPodStatus.
func (mr *MockUtilsInterfaceMockRecorder) WaitForPodStatus(namespace, pod, PodPhase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForPodStatus", reflect.TypeOf((*MockUtilsInterface)(nil).WaitForPodStatus), namespace, pod, PodPhase)
}

// WriteFile mocks base method.
func (m *MockUtilsInterface) WriteFile(path string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", path, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockUtilsInterfaceMockRecorder) WriteFile(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockUtilsInterface)(nil).WriteFile), path, data)
}
